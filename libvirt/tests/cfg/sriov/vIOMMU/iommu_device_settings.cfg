- vIOMMU.iommu_device_settings:
    type = iommu_device_settings
    start_vm = "no"
    ping_dest = '8.8.8.8'
    disk_driver = {'name': 'qemu', 'type': 'qcow2', 'iommu': 'on'}
    variants:
        - virtio:
            only q35, aarch64
            func_supported_since_libvirt_ver = (8, 3, 0)
            iommu_dict = {'model': 'virtio'}
        - intel:
            only q35
            start_vm = "yes"
            enable_guest_iommu = "yes"
            iommu_dict = {'model': 'intel', 'driver': {'intremap': 'on', 'caching_mode': 'on', 'eim': 'on', 'iotlb': 'on', 'aw_bits': '48'}}
        - smmuv3:
            only aarch64
            func_supported_since_libvirt_ver = (5, 5, 0)
            iommu_dict = {'model': 'smmuv3'}
    variants:
        - e1000e:
            only q35
            iface_model = 'e1000e'
            iface_dict = {'type_name': 'network', 'model': '${iface_model}', 'source': {'network': 'default'}}
        - rtl8139:
            only q35
            iface_model = 'rtl8139'
            iface_dict = {'type_name': 'network', 'model': '${iface_model}', 'source': {'network': 'default'}}
        - virtio_muti_devices:
            disk_dict = {'target': {'dev': 'vda', 'bus': 'virtio'}, 'device': 'disk', 'driver': ${disk_driver}}
            video_dict = {'primary': 'yes', 'model_heads': '1', 'model_type': 'virtio', 'driver': {'iommu': 'on'}}
            test_devices = ["Eth", "block", "gpu"]
            variants:
                - vhost_on:
                    interface_driver_name = "vhost"
                - vhost_off:
                    interface_driver_name = "qemu"
            interface_driver = {'driver_attr': {'name': '${interface_driver_name}', 'iommu': 'on'}}
            iface_dict = {'type_name': 'network', 'model': 'virtio', 'driver': ${interface_driver}, 'source': {'network': 'default'}}
        - hostdev_iface:
            only virtio
            need_sriov = yes
            ping_dest = ''
            test_devices = ["Eth"]
            iface_dict = {'managed': 'yes', 'type_name': 'hostdev', 'hostdev_address': {'type_name': 'pci', 'attrs': vf_pci_addr}}
        - scsi_controller:
            test_devices = ["scsi"]
            controller_dicts = [{'type': 'scsi', 'model': 'virtio-scsi','driver': {'iommu': 'on'}}]
            disk_driver = {'name': 'qemu', 'type': 'qcow2'}
            disk_dict = {'target': {'dev': 'sda', 'bus': 'scsi'}, 'driver': ${disk_driver}}
            cleanup_ifaces = no
        - pcie_to_pci_bridge_controller:
            controller_dicts = [{'type': 'pci', 'model': 'pcie-to-pci-bridge', 'pre_controller': 'pcie-root-port'}]
            disk_dict = {'target': {'dev': 'vda', 'bus': 'virtio'}, 'device': 'disk', 'driver': ${disk_driver}, 'model': 'virtio-non-transitional'}
            variants:
                - virtio_non_transitional:
                    no smmuv3
                    iface_dict = {'source': {'network': 'default'}, 'driver': {'driver_attr': {'iommu': 'on'}},'type_name': 'network', 'model': 'virtio-non-transitional'}
                - hostdev_iface:
                    only virtio
                    need_sriov = yes
                    ping_dest = ''
                    iface_dict = {'managed': 'yes', 'type_name': 'hostdev', 'hostdev_address': {'type_name': 'pci', 'attrs': vf_pci_addr}}
        - pcie_root_port_from_expander_bus:
            test_devices = ["Eth", "block"]
            root_port = {'type': 'pci', 'model': 'pcie-root-port', 'pre_controller': 'pcie-expander-bus'}
            controller_dicts = [{'type': 'pci', 'model': 'pcie-expander-bus', 'target': {'busNr': '252'}, 'pre_controller': 'pcie-root'}, ${root_port}, ${root_port}]
            iface_dict = {'source': {'network': 'default'}}
            disk_dict = {'target': {'dev': 'vda', 'bus': 'virtio'}, 'device': 'disk', 'driver': ${disk_driver}}
